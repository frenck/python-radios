[tool.poetry]
authors = ["Franck Nijhof <opensource@frenck.dev>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
description = "Asynchronous Python client for the Radio Browser API"
documentation = "https://github.com/frenck/python-radios"
homepage = "https://github.com/frenck/python-radios"
keywords = ["radio browser", "radio", "web radio", "radios", "api", "async", "client"]
license = "MIT"
maintainers = ["Franck Nijhof <opensource@frenck.dev>"]
name = "radios"
packages = [
  {include = "radios", from = "src"},
]
readme = "README.md"
repository = "https://github.com/frenck/python-radios"
version = "0.0.0"

[tool.poetry.dependencies]
aiodns = ">=3.0"
aiohttp = ">=3.0.0"
awesomeversion = ">=21.10.1"
backoff = ">=1.9.0"
cachetools = ">=4.0.0"
pydantic = "^1.9"
python = "^3.9"
yarl = ">=1.6.0"
pycountry = "^22.1.10"


[tool.poetry.dev-dependencies]
aresponses = "^2.1.6"
bandit = "1.7.5"
black = "^22.12"
blacken-docs = "^1.13.0"
codespell = "^2.2.4"
coverage = {version = "^7.2", extras = ["toml"]}
darglint = "^1.8.1"
flake8 = "^4.0.1"
flake8-bandit = "^3.0.0"
flake8-bugbear = "^23.3.12"
flake8-builtins = "^2.1.0"
flake8-comprehensions = "^3.12.0"
flake8-docstrings = "^1.7.0"
flake8-eradicate = "^1.4.0"
flake8-markdown = "^0.3.0"
flake8-simplify = "^0.20.0"
isort = "^5.12.0"
mypy = "^1.2"
pre-commit = "^3.2.2"
pre-commit-hooks = "^4.4.0"
pylint = "^2.17.2"
pytest = "^7.3.1"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
pyupgrade = "^3.3.1"
safety = "^2.3.5"
vulture = "^2.7"
yamllint = "^1.30.0"
types-cachetools = "^5.3.0"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/frenck/python-radios/issues"
Changelog = "https://github.com/frenck/python-radios/releases"

[tool.black]
target-version = ['py39']

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]
show_missing = true

[tool.coverage.run]
branch = true
source = ["radios"]

[tool.isort]
multi_line_output = 3
profile = "black"

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = 3.9

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = false # thanks backoff :(
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

# No incremental mode
cache_dir = "/dev/null"

[[tool.mypy.overrides]]
follow_imports = "skip"
module = "mypy-aiohttp.*"

[tool.pylint.MASTER]
extension-pkg-whitelist = [
  "pydantic",
]
ignore = [
  "tests",
]
load-plugins = [
  "pylint.extensions.bad_builtin",
  "pylint.extensions.code_style",
  "pylint.extensions.docparams",
  "pylint.extensions.docstyle",
  "pylint.extensions.empty_comment",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.typing",
]

[tool.pylint.BASIC]
good-names = [
  "_",
  "ex",
  "fp",
  "i",
  "id",
  "j",
  "k",
  "on",
  "Run",
  "T",
  "wv",
]

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "consider-alternative-union-syntax",
  "duplicate-code",
  "format",
  "too-few-public-methods",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pyright]
include = ["src"]

[tool.pytest.ini_options]
addopts = " --cov"

[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
verbose = true

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
